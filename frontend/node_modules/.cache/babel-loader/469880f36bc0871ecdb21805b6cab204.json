{"ast":null,"code":"function StockListCtrl($scope, $http, Chameleon, version) {\n  var bugsense = new Bugsense({\n    apiKey: 'ffae2ef2',\n    appversion: version\n  });\n  var POLL_ID = 'stock-update';\n  var POLL_PERIOD = 30 * 60; // 30 minutes between updates.\n\n  var API_URL = 'http://widgetgecko.com/api/stocks/'; // This has to be done like this or it doesn't work.\n  // I should probably figure out why at some point, but not right now.\n\n  setTimeout(function () {\n    Chameleon.init({\n      version: version\n    });\n  }, 1);\n  $scope.stocks = [];\n  $scope.symbols = [];\n  $scope.isConfigured = false;\n  $scope.$on('chameleon.load', startPolling);\n  $scope.$on('chameleon.resume', startPolling);\n  $scope.$on('chameleon.pause', stopPolling);\n  $scope.$on('chameleon.connect', startPolling);\n  $scope.$on('chameleon.disconnect', stopPolling);\n  $scope.$on('chameleon.notchameleon', startPolling);\n  $scope.$on('chameleon.configure', showSettings);\n  $scope.$on('chameleon.refresh', function () {\n    updateStocks();\n  }); // Very, very debug code.\n\n  $scope.$on('chameleon.notchameleon', function () {\n    $('body').addClass('not-chameleon');\n  });\n\n  function startPolling(event) {\n    loadSymbols(function () {\n      stopPolling();\n\n      if ($scope.symbols.length === 0) {\n        $scope.isConfigured = false;\n        return;\n      }\n\n      $scope.isConfigured = true;\n      updateStocks();\n      $scope.$emit('chameleon.polling.start', {\n        id: POLL_ID,\n        interval: POLL_PERIOD,\n        callback: function () {\n          updateStocks();\n        }\n      });\n    });\n  }\n\n  function stopPolling(event) {\n    $scope.$emit('chameleon.polling.stop', {\n      id: POLL_ID\n    });\n  }\n\n  function updateStocks() {\n    $scope.$emit('chameleon.showLoading');\n    $http.get(API_URL + '?symbol=' + _.pluck($scope.symbols, 'name').join('|')).success(function (data) {\n      $scope.stocks = data;\n      $scope.$emit('chameleon.invalidate');\n      $scope.$emit('chameleon.hideLoading');\n    });\n  }\n\n  function showSettings() {\n    $scope.$emit('chameleon.promptHtml', {\n      url: 'settings.html',\n      callback: function () {\n        startPolling();\n      }\n    });\n  }\n\n  $scope.showSettings = function () {\n    showSettings();\n  };\n\n  function loadSymbols(callback) {\n    $scope.$emit('chameleon.getData', function (data) {\n      $scope.$apply(function () {\n        if (data && data.symbols) {\n          $scope.symbols = data.symbols;\n        }\n\n        callback();\n      });\n    });\n  }\n}\n\nfunction StockSettingsCtrl($scope, Chameleon, version) {\n  // This has to be done like this or it doesn't work.\n  // I should probably figure out why at some point, but not right now.\n  setTimeout(function () {\n    Chameleon.init({\n      version: version\n    });\n    loadSymbols();\n  }, 1);\n\n  $scope.addSymbol = function () {\n    $scope.symbols.push({\n      name: $scope.newSymbol.toUpperCase()\n    });\n    $scope.newSymbol = '';\n    saveSymbols();\n  };\n\n  $scope.removeSymbol = function (symbol) {\n    $scope.symbols = _.reject($scope.symbols, function (s) {\n      return s.name === symbol.name;\n    });\n    saveSymbols();\n  };\n\n  $scope.close = function () {\n    $scope.$emit('chameleon.close', true);\n  };\n\n  function saveSymbols() {\n    $scope.$emit('chameleon.getData', function (data) {\n      if (!data) {\n        data = {};\n      }\n\n      data.symbols = $scope.symbols;\n      $scope.$emit('chameleon.saveData', data);\n    });\n  }\n\n  function loadSymbols() {\n    $scope.$emit('chameleon.getData', function (data) {\n      $scope.$apply(function () {\n        if (data && data.symbols) {\n          $scope.symbols = data.symbols;\n        }\n      });\n    });\n  }\n\n  $scope.symbols = [];\n}","map":{"version":3,"sources":["/Users/mickael/Desktop/MICKAEÌˆL/ECE Paris - ING 4/Technologies Web/PROJECT-WEB-OCRES/frontend/src/components/Bourse/Bourse.js"],"names":["StockListCtrl","$scope","$http","Chameleon","version","bugsense","Bugsense","apiKey","appversion","POLL_ID","POLL_PERIOD","API_URL","setTimeout","init","stocks","symbols","isConfigured","$on","startPolling","stopPolling","showSettings","updateStocks","$","addClass","event","loadSymbols","length","$emit","id","interval","callback","get","_","pluck","join","success","data","url","$apply","StockSettingsCtrl","addSymbol","push","name","newSymbol","toUpperCase","saveSymbols","removeSymbol","symbol","reject","s","close"],"mappings":"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","sourcesContent":["function StockListCtrl($scope, $http, Chameleon, version) {\n\n  var bugsense = new Bugsense({ apiKey: 'ffae2ef2', appversion: version });\n  var POLL_ID = 'stock-update';\n  var POLL_PERIOD = 30 * 60; // 30 minutes between updates.\n  var API_URL = 'http://widgetgecko.com/api/stocks/';\n\n  // This has to be done like this or it doesn't work.\n  // I should probably figure out why at some point, but not right now.\n  setTimeout(function () {\n    Chameleon.init({ version: version });\n  }, 1);\n\n  $scope.stocks = [];\n  $scope.symbols = [];\n  $scope.isConfigured = false;\n\n  $scope.$on('chameleon.load', startPolling);\n  $scope.$on('chameleon.resume', startPolling);\n  $scope.$on('chameleon.pause', stopPolling);\n  $scope.$on('chameleon.connect', startPolling);\n  $scope.$on('chameleon.disconnect', stopPolling);\n  $scope.$on('chameleon.notchameleon', startPolling);\n  $scope.$on('chameleon.configure', showSettings);\n  $scope.$on('chameleon.refresh', function () {\n    updateStocks();\n  });\n\n  // Very, very debug code.\n  $scope.$on('chameleon.notchameleon', function () {\n    $('body').addClass('not-chameleon');\n  });\n\n  function startPolling(event) {\n    loadSymbols(function () {\n      stopPolling();\n      if ($scope.symbols.length === 0) {\n        $scope.isConfigured = false;\n        return;\n      }\n      $scope.isConfigured = true;\n      updateStocks();\n      $scope.$emit('chameleon.polling.start', {\n        id: POLL_ID,\n        interval: POLL_PERIOD,\n        callback: function () {\n          updateStocks();\n        }\n      });\n    });\n  }\n\n  function stopPolling(event) {\n    $scope.$emit('chameleon.polling.stop', {\n      id: POLL_ID\n    });\n  }\n\n  function updateStocks() {\n    $scope.$emit('chameleon.showLoading');\n    $http.get(API_URL + '?symbol=' + _.pluck($scope.symbols, 'name').join('|'))\n      .success(function (data) {\n        $scope.stocks = data;\n        $scope.$emit('chameleon.invalidate');\n        $scope.$emit('chameleon.hideLoading');\n      });\n  }\n\n  function showSettings() {\n    $scope.$emit('chameleon.promptHtml', {\n      url: 'settings.html',\n      callback: function () {\n        startPolling();\n      }\n    });\n  }\n\n  $scope.showSettings = function () {\n    showSettings();\n  };\n\n  function loadSymbols(callback) {\n    $scope.$emit('chameleon.getData', function (data) {\n      $scope.$apply(function () {\n        if (data && data.symbols) {\n          $scope.symbols = data.symbols;\n        }\n        callback();\n      })\n    });\n  }\n}\n\nfunction StockSettingsCtrl($scope, Chameleon, version) {\n\n  // This has to be done like this or it doesn't work.\n  // I should probably figure out why at some point, but not right now.\n  setTimeout(function () {\n    Chameleon.init({ version: version });\n    loadSymbols();\n  }, 1);\n\n\n  $scope.addSymbol = function() {\n    $scope.symbols.push({ name: $scope.newSymbol.toUpperCase() });\n    $scope.newSymbol = '';\n    saveSymbols();\n  }\n\n  $scope.removeSymbol = function (symbol) {\n    $scope.symbols = _.reject($scope.symbols, function (s) {\n      return s.name === symbol.name;\n    });\n    saveSymbols();\n  }\n\n  $scope.close = function () {\n    $scope.$emit('chameleon.close', true);\n  }\n\n  function saveSymbols() {\n    $scope.$emit('chameleon.getData', function (data) {\n      if (! data) {\n        data = {};\n      }\n      data.symbols = $scope.symbols;\n      $scope.$emit('chameleon.saveData', data);\n    });\n  }\n\n  function loadSymbols() {\n    $scope.$emit('chameleon.getData', function (data) {\n      $scope.$apply(function () {\n        if (data && data.symbols) {\n          $scope.symbols = data.symbols;\n        }\n      })\n    });\n  }\n\n  $scope.symbols = [];\n}"]},"metadata":{},"sourceType":"module"}